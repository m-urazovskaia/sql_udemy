Изолированность

Проблемы параллельности транзакций:
	"грязное чтение" - чтение частичных изменений (считываеются незаCommit-ченные изменения параллельной транзакции. Вторая транзакция может делать и UPDATE, и INSERT, и DELETE)
	неповторяемое чтение - повторное чтение показывает, что данные были изменены после первого чтения (обычно связано с тем, что вторая транзакция совершает UPDATE своих данных)
	фантомное чтение - повторное чтение показывает другой результирующий набор
	аномалия сериализацции - результат параллельно выполняемых транзакций может не согласовываться с результатом этих же транзакций, выполняемых по очерееди (обычно связано с другой транзакцией, которая Commit-ит INSERT-ы и DELETE-ы. Соответственно, транзакция видит новые строки или строки, которые исчезли с момента начала транзакции)

И фантомное и неповторяемое чтения связаны с операциями изменения данных из другой транзакции, которые были зафиксированы (COMMIT) после начала исходной транзакции, а затем уже заново считаны исходной транзакцией 

Подходы к изоляции транзакций:
	первый основан на блокировках
	базово ИзТ в Postgres построена на MVCC (multiversion control system)


MVCC
	Изменения версионируются таймштампами (т. к. реально данные не удаляются до конца или не апдейтятся на совсем, Postgres видит различные версии строк: более новые, старые, и на основе версионности принимает решение касаемо изоляции транзакций)

	Механизм изоляции ориентируется на снимки данных по таймштампам

	Снижается потребность явных блокировок

В начале транзакции:
BEGIN ISOLATION LEVEL level

Внутри транзакции:
SET TRANSACTION ISOLATION LEVEL level

levels:
- READ COMMITED
- REPEATABLE READ
- SERIALIZABLE