# RAISE [level] 'message (%)', arg_name;

# level - уровень "серьезности" ошибки:
	DEBUG - отладка
	LOG - лог
	INFO - информация
	NOTICE- замечание
	WARNING - потенциальная опасность
	EXCEPTION - исключение / ошибка (здесь текущая транзакция будет откачена (неявный roll back))

# log_min_messages - регулирует уровень сообщенийб которые будут писаться в лог сервера(WARNING - по умолчанию) 

# client_min_messages - регулирует уровень сообщенийб которые будут передаваться вызывающей стороне(NOTICE - по умолчанию) 

# Одни из самых важных параметров HINT(подсказка) и ERRCODE

# Параметры присоединяются с помощью USING:
	RAISE 'invalid billing number=%', number USING HINT='Check out the billing number' ERRCODE='12881'

# Чтобы "поймать" исключение нужен блок EXCEPTION WHEN:
	EXCEPTION WHEN condition(например 'errcode=..')[others] THEN handling_logic

# Код в блоке EXCEPTION теряет в производительности

# Старайтесь по возможности избегать исключений


DROP IF EXISTS get_season;
CREATE FUNCTION get_season(month_number int) RETURNS text AS $$
DECLARE
	season text;
BEGIN
	IF month_number NOT BETWEEN 1 and 12 THEN
		RAISE EXCEPTION 'Invalid month. You passed: (%)', month_number USING HINT='Allowed from 1 up to 12', ERRCODE = 12882;
	END IF;

	IF month_number BETWEEN 3 and 5 THEN
		season = 'Spring';
	ELSEIF month_number BETWEEN 6 and 8 THEN
		season = 'Summer';
	ELSEIF month_number BETWEEN 9 and 11 THEN
		season = 'Autumn';
	ELSE
		season = 'Winter';
	END IF;

	RETURN season;
END;
$$ LANGUAGE plpgsql;

SELECT get_season(12);
SELECT get_season(15); -- 'Winter' / после модиф функции будет Ошибка


# Как можно обработать ошибку вызывающей стороне
CREATE FUNCTION get_season_caller(month_number int) RETURNS text AS $$
DECLARE
	err_ctx text;
	err_msg text;
	err_details text;
	err_code text;
BEGIN
	RETURN get_season(month_number);
EXCEPTION WHEN SQLSTATE '12882' THEN
	GET STACKED DIAGNOSTICS
		err_ctx = PG_EXCEPTION_CONTEXT,
		err_msg = MESSAGE_TEXT,
		err_details = PG_EXCEPTION_DETAIL,
		err_code = RETURNED_SQLSTATE;
	RAISE INFO 'My custom handler:';
	RAISE INFO 'Error context:%', err_ctx;
	RAISE INFO 'Error msg:%', err_msg;
	RAISE INFO 'Error details:%', err_details;
	RAISE INFO 'Error code:%', err_code;
	RAISE INFO 'A problem. Nothing special.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

SELECT get_season_caller(15);

# Без использования 'GET STACKED DIAGNOSTICS'
CREATE FUNCTION get_season_caller2(month_number int) RETURNS text AS $$
BEGIN
	RETURN get_season(month_number);
EXCEPTION 
WHEN SQLSTATE '12882' THEN
	RAISE INFO 'My custom handler:';
	RAISE INFO 'Error Name:%', SQLERRM;
	RAISE INFO 'Error details:%', SQLSTATE;
	RETURN NULL;
WHEN OTHERS THEN -- на случай, если какой-то код не предусмотрели
	RAISE INFO 'My custom handler:'; -- для примера
	RAISE INFO 'Error Name:%', SQLERRM; -- для примера
END;
$$ LANGUAGE plpgsql;

SELECT get_season_caller2(15);