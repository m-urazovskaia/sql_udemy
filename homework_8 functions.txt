-- 1. Создайте функцию, которая делает бэкап таблицы customers (копирует все данные в другую таблицу),
-- предварительно стирая таблицу для бэкапа, если такая уже существует
-- (чтобы в случае многократного запуска таблица для бэкапа перезатиралась).
CREATE OR REPLACE FUNCTION get_tmp_customers() RETURNS void AS $$
	DROP TABLE IF EXISTS tmp_customers;
	SELECT *
	INTO tmp_customers
	FROM customers;
	-- ИЛИ 
	CREATE TABLE tmp_customers AS
	SELECT * FROM customers;
$$ language SQL;

SELECT * FROM tmp_customers;
SELECT get_tmp_customers();

-- 2. Создать функцию, которая возвращает средний фрахт (freight) по всем заказам
CREATE OR REPLACE FUNCTION get_avg_freight() RETURNS float8 AS $$
	SELECT AVG(freight) as avg_freight
	FROM orders
$$ language SQL;

SELECT get_avg_freight();

-- 3. Написать функцию, которая принимает два целочисленных параметра,
-- используемых как нижняя и верхняя границы для генерации случайного числа в пределах этой границы
-- (включая сами граничные значения).
-- Функция random генерирует вещественное число от 0 до 1.
-- Необходимо вычислить разницу между границами и прибавить единицу.
-- На полученное число умножить результат функции random() и прибавить к результату значение нижней границы.
-- Применить функцию floor() к конечному результату, чтобы не "уехать" за границу и получить целое число.
CREATE OR REPLACE FUNCTION  get_random_between(low_boundary numeric, high_boundary numeric) 
	RETURNS numeric AS $$
BEGIN
	RETURN floor(random() * (high_boundary - low_boundary + 1) + low_boundary);
END;
$$ language plpgsql;

SELECT get_random_between(1, 3)
FROM generate_series(1, 5);

-- 4. Создать функцию, которая возвращает самые низкую и высокую зарплаты среди сотрудников заданного города.
ALTER TABLE employees
	ADD COLUMN salary numeric DEFAULT get_random_between(21.50, 115.88);
	--DROP COLUMN salary;
	
SELECT * FROM employees
	
CREATE OR REPLACE FUNCTION  get_salaries_of_employees(emp_city varchar, OUT min_salary numeric, OUT max_salary numeric) AS $$
	SELECT MIN(salary), MAX(salary)
	FROM employees
	WHERE city = emp_city
$$ language sql;

SELECT get_salaries_of_employees('London');

-- 5. Создать функцию, которая корректирует зарплату на заданный процент, 
-- но не корректирует зарплату, если её уровень превышает заданный уровень,
-- при этом верхний уровень зарплаты по умолчанию равен 70, а процент коррекции равен 15%.
CREATE OR REPLACE FUNCTION get_adjusted_salary_level(level_salary numeric) RETURNS numeric AS $$
DECLARE
	percentage_of_cor numeric = 0.15;
BEGIN
 	IF level_salary < 70 THEN
 		level_salary = level_salary + level_salary * percentage_of_cor;
 	ELSE
 		level_salary = level_salary;
	END IF;
	RETURN level_salary;
END;
$$ language plpgsql;

SELECT get_adjusted_salary_level(salary) FROM employees;
--ИЛИ--
CREATE OR REPLACE FUNCTION  get_adjusted_salary_level_2(upper_boundary numeric DEFAULT 70,
														percentage_of_cor numeric DEFAULT 0.15) RETURNS void AS $$
	UPDATE employees 
	SET salary = salary + salary * percentage_of_cor
	WHERE salary <= upper_boundary
$$ language sql;

SELECT get_adjusted_salary_level_2();
SELECT * FROM employees ORDER BY salary;

DROP FUNCTION  get_adjusted_salary_level_2;

-- 6. Модифицировать функцию, корректирующую зарплату таким образом,
-- чтобы в результате коррекции, она так же выводила бы изменённые записи.
CREATE OR REPLACE FUNCTION  get_adjusted_salary_level_returning(upper_boundary numeric DEFAULT 70,
														percentage_of_cor numeric DEFAULT 0.15)
														RETURNS setof employees AS $$
	UPDATE employees 
	SET salary = salary + salary * percentage_of_cor
	WHERE salary <= upper_boundary
	RETURNING *;
$$ language sql;

SELECT * FROM get_adjusted_salary_level_returning();

-- 7. Модифицировать предыдущую функцию так, чтобы она возвращала только колонки
-- last_name, first_name, title, salary
DROP FUNCTION  get_adjusted_salary_level_returning;
CREATE OR REPLACE FUNCTION  get_adjusted_salary_level_returning(upper_boundary numeric DEFAULT 70,
														percentage_of_cor numeric DEFAULT 0.15)
														RETURNS table(last_name varchar,
																				first_name varchar,
																				title varchar, salary numeric) AS $$
	UPDATE employees 
	SET salary = salary + salary * percentage_of_cor
	WHERE salary <= upper_boundary
	RETURNING last_name, first_name, title, salary;
$$ language sql;

SELECT * FROM get_adjusted_salary_level_returning();

-- 8. Написать функцию, которая принимает метод доставки и возвращает записи из таблицы orders,
-- в которых freight меньше значения, определяемого по следующему алгоритму:
-- ищем максимум фрахта (freight) среди заказов по заданному методу доставки
-- корректируем найденный максимум на 30% в сторону понижения
-- вычисляем среднее значение фрахта среди заказов по заданному методому доставки
-- вычисляем среднее значение между средним найденным на предыдущем шаге и скорректированным максимумом
-- возвращаем все заказы в которых значение фрахта меньше найденного на предыдущем шаге среднего
CREATE OR REPLACE FUNCTION get_ship_via(shippment_type int) RETURNS SETOF orders AS $$
	SELECT * FROM orders
	WHERE freight < (SELECT (MAX(freight)*0.7 + AVG(freight))/2 FROM orders
						WHERE ship_via = shippment_type)
$$ language sql;

SELECT * FROM get_ship_via(1)

--ИЛИ--
CREATE OR REPLACE FUNCTION get_orders_by_shipping(ship_method int) RETURNS SETOF orders AS $$
DECLARE
	average numeric;
	maximum numeric;
	meddle numeric;
BEGIN
	SELECT MAX(freight) INTO maximum
	FROM orders
	WHERE ship_via = ship_method;
	
	SELECT AVG(freight) INTO average
	FROM orders
	WHERE ship_via = ship_method;
	
	maximum = maximum + maximum * 0.3;
	meddle = (maximum + average) / 2;
	
	RETURN QUERY
	SELECT * FROM orders
	WHERE freight < meddle;
END;
$$ LANGUAGE plpgsql;

SELECT COUNT(*) FROM get_orders_by_shipping(1);

-- 9. Написать функцию, которая принимает:
-- уровень зарплаты, максимальную зарплату (по умолчанию 80) минимальную зарплату (по умолчанию 30),
-- коэффициент роста зарплаты (по умолчанию 20%)
-- Если зарплата выше минимальной, то возвращает false
-- Если зарплата ниже минимальной, то увеличивает зарплату на коэффициент роста
-- и проверяет не станет ли зарплата после повышения превышать максимальную.
-- Если превысит - возвращает false, в противном случае true.
-- Проверить реализацию, передавая следующие параметры:
-- (где c - уровень з/п, max - макс. уровень з/п, min - минимальный уровень з/п, r - коэффициент):
-- c = 40, max = 80, min = 30, r = 0.2 - должна вернуть false
-- c = 79, max = 81, min = 80, r = 0.2 - должна вернуть false
-- c = 79, max = 95, min = 80, r = 0.2 - должна вернуть true
CREATE OR REPLACE FUNCTION get_salary_by_increase_rate(current_salary numeric,
															max_salary numeric DEFAULT 80,
															min_salary numeric DEFAULT 30,
															increase_rate numeric DEFAULT 0.2)
	RETURNS bool AS $$
DECLARE
	new_salary numeric;
BEGIN
	IF current_salary > min_salary OR current_salary > max_salary THEN return false;
	END IF;
	
	IF current_salary < min_salary THEN 
		new_salary = current_salary + current_salary * increase_rate;
	END IF;
	
	IF new_salary > max_salary THEN return false;
	ELSE
		return true;
	END IF;
	
END;
$$ LANGUAGE plpgsql;

SELECT get_salary_by_increase_rate(40, 80, 30, 0.2; --false
SELECT get_salary_by_increase_rate(79, 81, 80, 0.2); --false
SELECT get_salary_by_increase_rate(79, 95, 80, 0.2); --true