CREATE FUNCTION func_name([arg1, arg2...]) RETURNS data_type AS $$
BEGIN
--logic
END;
$$ LANGUAGE plpgsql;

# BEGIN/END - тело метода(дело не в транзакциях)

-- создание переменных
-- прогон циклов и развитая логика
-- возврат значения через RETURN (вместо SELECT) или RETURN QUERY(в дополнение к SELECT)


CREATE OR REPLACE FUNCTION get_total_number_of_goods() RETURNS bigint AS $$
BEGIN
	RETURN sum(units_in_stock)
	FROM products;
END;
$$ LANGUAGE plpgsql;

SELECT get_total_number_of_goods();

CREATE OR REPLACE FUNCTION get_max_price_from_discontinued() RETURNS real AS $$
BEGIN
	RETURN max(unit_price)
	FROM products
	WHERE discontinued = 1;
END;
$$ LANGUAGE plpgsql;


SELECT get_max_price_from_discontinued();


CREATE OR REPLACE FUNCTION get_price_boundaries(OUT max_price real, OUT min_price real) AS $$
BEGIN
	max_price := MAX(unit_price) FROM products;
	min_price := MIN(unit_price) FROM products;
	ИЛИ
	SELECT MAX(unit_price), MIN(unit_price)
	INTO max_price, min_price
	FROM products;
END;
$$ LANGUAGE plpgsql;
# := операция присвоения (разницы с просто '=' не несет, нужна для разграничения с оператором сравнения)

SELECT * FROM get_price_boundaries();


CREATE OR REPLACE FUNCTION get_sum(x int, y int, out result int) AS $$
BEGIN
	result := x + y;
	RETURN; -- если мы хотим дальше функцию не исполнять и выйти из нее досрочно
END;
$$ LANGUAGE plpgsql;

SELECT * FROM get_sum(2, 3);


CREATE FUNCTION get_customers_by_country(customer_country varchar) RETURNS SETOF customers AS $$
BEGIN
	RETURN QUERY
	SELECT *
	FROM customers
	WHERE country = customer_country;
END;
$$ LANGUAGE plpgsql;

SELECT * FROM get_customers_by_country('USA');